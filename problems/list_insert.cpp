#include <iostream>

int test[]={2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,219,49250,49251,49252,49253,49254,49255,49256,49257,49258,49259,49260,49261,49262,49263,49264,49265,49266,49267,49268,49269,49270,49271,49272,49273,49274,49275,49276,49277,49278,49279,49280,49281,49282,49283,49284,49285,49286,49492889,49290,49291,49292,49293,49294,49295,49296,49297,49298,49299,49300,49301,49302,49303,49304,49305,49306,49307,49308,49309,49310,49311,49312,49313,49314,49315,49316,49317,49318,49319,49320,4932123,4932,49327328,49329,49330,49331,49332,493334,49335,493337,49338,340,49341,49342,49343,49344,49345,49346,49347,49348,49349,49350,49351,49352,49353,49354,49355,49356,49357,49358,49359,49361,49362,49364,49,49366,7,49369,493371,49372,49373,49374,49375,49376,49377,49378,49379,49380,49381,493823,49389385,86,47,49388,49389,49390,49391,499393,49395,493949398,49399,49400,49401,49402,49403,49404,4907,49408,49409,49410,49411,49412,4941314,49415,49418,49419,49420,49421,49422,49423,49424,49425,49426,49427,49428,49429,49430,49431,49432,49433,49434,49439438,49439,49440,49441,49442,49443,49444,49445,49446,49447,499449,499452,49453,494,49449458,449460461,2,3,49464,494,49466,49467,49468,49469,49470,49471,49472,49473,49474,49476,4947779,49480,4948483,49484,494,49487,49488490,49491,494,49496,49497,49,0,49501,493,49504,49505506,49507,49509,49510,465,967968,499670,4,49499975,49,49977,49978,49979,49981,499983,49984,49985,49986,49987,49988,49989,49990,49991,49992,49993,49994,49995,49996,49997,49998,49999,50000,1};

struct ListNode {
    int val;
    ListNode *next;
    ListNode() : val(0), next(nullptr) {}
    ListNode(int x) : val(x), next(nullptr) {}
    ListNode(int x, ListNode *next) : val(x), next(next) {}
 };
 
class Solution {
public:
    ListNode* sortList(ListNode* head) {
        if (head){
            ListNode* res=new ListNode(head->val);
            head=head->next;
            while(head){
                res=insert(res,head->val);
                head=head->next;
            }
            return res;
        }
        return nullptr;
    }

    ListNode* insert(ListNode* head,int val){
        ListNode *N=head;
        ListNode *before=nullptr;
        while(N){
            if(val<N->val){
                ListNode*curr=new ListNode(val,N);
                if (!before){
                    head=curr;
                    break;
                }
                before->next=curr;
                break;
            }
            before=N;
            N=N->next;
        }
        if(!N)
            before->next=new ListNode(val);
        return head;
    }
};

int main(){
	ListNode*head=new ListNode(test[0]);
	ListNode*curr=head;
	int i=1;
	while(i<(sizeof(test)/sizeof(test[0]))){
		curr->next=new ListNode(test[i]);
		curr=curr->next;
		i+=1;
	}
	Solution *s=new Solution();
	ListNode *res=s->sortList(head);
	while(res){
		std::cout<<res->val<<' ';
		res=res->next;
	}
	return 0;
}
